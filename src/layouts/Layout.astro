---
import ThemeToggleButton from '../components/ThemeToggleButton.astro';
import '../styles/global.css';
---
<!doctype html>
<html lang="en" class="font-sans">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>Professional Portfolio</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    
    <style>
      .theme-transition-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        pointer-events: none;
        z-index: 9999;
        background: transparent;
        transform-origin: top right;
        transition: none;
      }

      .theme-transition-overlay.transitioning-to-dark {
        background: rgba(17, 24, 39, 0.4);
        clip-path: circle(0% at 85% 60px);
        animation: expandRoomDark 1s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
      }

      .theme-transition-overlay.transitioning-to-light {
        background: rgba(243, 244, 246, 0.4);
        clip-path: circle(0% at 85% 60px);
        animation: expandRoomLight 1s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
      }

      @keyframes expandRoomDark {
        0% {
          clip-path: circle(0% at 85% 60px);
        }
        30% {
          clip-path: circle(20% at 85% 60px);
        }
        100% {
          clip-path: circle(140% at 85% 60px);
        }
      }

      @keyframes expandRoomLight {
        0% {
          clip-path: circle(0% at 85% 60px);
        }
        30% {
          clip-path: circle(20% at 85% 60px);
        }
        100% {
          clip-path: circle(140% at 85% 60px);
        }
      }

      /* Prevent theme flicker during transition */
      html.theme-transitioning * {
        transition: none !important;
      }
    </style>
  </head>
    <body class="bg-slate-50 dark:bg-slate-900 text-slate-800 dark:text-slate-100" style="font-family: 'Montserrat', sans-serif; transition: background-color 0.5s, color 0.5s;">
    <!-- Theme Transition Overlay -->
    <div id="theme-transition-overlay" class="theme-transition-overlay"></div>
    
    <header class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-md shadow-sm border-b border-slate-200 dark:border-slate-700 sticky top-0 z-50">
      <div class="container mx-auto px-6 py-4 flex justify-between items-center">
        <div class="flex items-center gap-3">
          <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-lg flex items-center justify-center">
            <span class="text-white font-bold text-sm">JA</span>
          </div>
          <h1 class="text-xl font-bold bg-gradient-to-r from-slate-800 to-blue-600 dark:from-slate-100 dark:to-blue-400 bg-clip-text text-transparent font-sans">
            Javier Arroyo
          </h1>
        </div>
        
        <nav class="hidden md:flex items-center gap-8 font-sans">
          <a href="#about" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium">
            About
          </a>
          <a href="#experience" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium">
            Experience
          </a>
          <a href="#projects" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium">
            Projects
          </a>
          <a href="#contact" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium">
            Contact
          </a>
        </nav>

        <div class="flex items-center gap-4">
          <button id="mobile-menu-toggle" class="md:hidden p-2 text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
          <ThemeToggleButton />
        </div>
      </div>
      
      <!-- Mobile Menu -->
      <div id="mobile-menu" class="hidden md:hidden bg-white/95 dark:bg-slate-800/95 backdrop-blur-md border-t border-slate-200 dark:border-slate-700 font-sans">
        <nav class="container mx-auto px-6 py-4 flex flex-col gap-4">
          <a href="#about" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium py-2">
            About me
          </a>
          <a href="#skills" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium py-2">
            Skills
          </a>
          <a href="#experience" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium py-2">
            Experience
          </a>
          <a href="#certifications" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium py-2">
            Certifications
          </a>
          <a href="#projects" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium py-2">
            Projects
          </a>
          <a href="#contact" class="text-slate-600 dark:text-slate-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200 font-medium py-2">
            Contact
          </a>
        </nav>
      </div>
    </header>
    <main class="min-h-screen">
      <slot />
    </main>
    <footer class="bg-white dark:bg-slate-800 mt-8 py-8 border-t border-slate-200 dark:border-slate-700">
      <div class="container mx-auto px-6 text-center">
        <div class="flex flex-col items-center gap-4">
          <div class="flex items-center gap-3">
            <div class="w-6 h-6 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-md flex items-center justify-center">
              <span class="text-white font-bold text-xs">JA</span>
            </div>
            <span class="text-slate-600 dark:text-slate-400 font-medium">
              &copy; {new Date().getFullYear()} Javier Pérez Arroyo
            </span>
          </div>
          <p class="text-sm text-slate-500 dark:text-slate-500">
            Built with ❤️ using Astro & Tailwind CSS
          </p>
        </div>
      </div>
    </footer>
    
    <script>
      function initializeTheme() {
        // Detecta el tema inicial
        const savedTheme = localStorage.getItem('theme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      }

      function toggleThemeWithAnimation() {
        const html = document.documentElement;
        const overlay = document.getElementById('theme-transition-overlay');
        const isDark = html.classList.contains('dark');
        
        // Verificar que el overlay existe
        if (!overlay) return;
        
        // Prevenir múltiples animaciones simultáneas
        if (overlay.classList.contains('transitioning-to-dark') || 
            overlay.classList.contains('transitioning-to-light')) {
          return;
        }
        
        // Agregar clase de transición para prevenir parpadeos
        html.classList.add('theme-transitioning');
        
        // Configurar la animación según el tema actual
        if (isDark) {
          // Cambiar a tema claro
          overlay.classList.add('transitioning-to-light');
        } else {
          // Cambiar a tema oscuro
          overlay.classList.add('transitioning-to-dark');
        }
        
        // Cambiar el tema después de un pequeño delay para que se vea la animación
        setTimeout(() => {
          if (isDark) {
            html.classList.remove('dark');
            localStorage.setItem('theme', 'light');
          } else {
            html.classList.add('dark');
            localStorage.setItem('theme', 'dark');
          }
        }, 300);
        
        // Limpiar las clases de animación después de que termine
        setTimeout(() => {
          if (overlay) {
            overlay.classList.remove('transitioning-to-dark', 'transitioning-to-light');
          }
          html.classList.remove('theme-transitioning');
        }, 1000);
      }

      // Exponer la función globalmente para que el botón pueda usarla
      (window as any).toggleThemeWithAnimation = toggleThemeWithAnimation;

      // Mobile menu functionality
      function initializeMobileMenu() {
        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
        const mobileMenu = document.getElementById('mobile-menu');
        
        if (mobileMenuToggle && mobileMenu) {
          mobileMenuToggle.addEventListener('click', () => {
            mobileMenu.classList.toggle('hidden');
          });

          // Close mobile menu when clicking on a link
          const mobileLinks = mobileMenu.querySelectorAll('a');
          mobileLinks.forEach(link => {
            link.addEventListener('click', () => {
              mobileMenu.classList.add('hidden');
            });
          });

          // Close mobile menu when clicking outside
          document.addEventListener('click', (e) => {
            if (!mobileMenuToggle.contains(e.target as Node) && !mobileMenu.contains(e.target as Node)) {
              mobileMenu.classList.add('hidden');
            }
          });
        }
      }

      // Inicializar el tema y el menú móvil cuando el DOM esté listo
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          initializeTheme();
          initializeMobileMenu();
        });
      } else {
        initializeTheme();
        initializeMobileMenu();
      }
    </script>
  </body>
</html>