---
// Clean Soft Skills Component with Physics Only
---

<div class="soft-skills-container">
    <div class="bubbles-container">
        <div class="bubble" data-skill="Effective Communication">
            <span>Effective<br>Communication</span>
        </div>
        <div class="bubble" data-skill="Teamwork">
            <span>Teamwork</span>
        </div>
        <div class="bubble" data-skill="Collaboration">
            <span>Collaboration</span>
        </div>
        <div class="bubble" data-skill="Problem-Solving">
            <span>Problem-Solving</span>
        </div>
        <div class="bubble" data-skill="Critical Thinking">
            <span>Critical<br>Thinking</span>
        </div>
        <div class="bubble" data-skill="Analytical Thinking">
            <span>Analytical<br>Thinking</span>
        </div>
        <div class="bubble" data-skill="Adaptability">
            <span>Adaptability</span>
        </div>
        <div class="bubble" data-skill="Continuous Learning">
            <span>Continuous<br>Learning</span>
        </div>
        <div class="bubble" data-skill="Time Management">
            <span>Time<br>Management</span>
        </div>
        <div class="bubble" data-skill="Attention to Detail">
            <span>Attention to Detail</span>
        </div>
        <div class="bubble" data-skill="Proactivity">
            <span>Proactivity</span>
        </div>
        <div class="bubble" data-skill="Self-Management">
            <span>Self-Management</span>
        </div>
        <div class="bubble" data-skill="Resilience">
            <span>Resilience</span>
        </div>
    </div>
</div>

<style>
    .soft-skills-container {
        position: relative;
        min-height: 700px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        background: linear-gradient(135deg, 
            rgba(59, 130, 246, 0.08) 0%, 
            rgba(139, 92, 246, 0.08) 25%,
            rgba(16, 185, 129, 0.08) 50%,
            rgba(34, 197, 94, 0.08) 75%,
            rgba(236, 72, 153, 0.08) 100%);
        border-radius: 2rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .bubbles-container {
        position: relative;
        width: 100%;
        height: 100%;
        padding: 2rem;
    }

    .bubble {
        position: absolute;
        background: radial-gradient(ellipse at 32% 28%, 
            rgba(255, 255, 255, 0.95) 0%, 
            rgba(255, 255, 255, 0.85) 40%,
            rgba(255, 255, 255, 0.75) 100%);
        backdrop-filter: blur(20px);
        border: 2px solid rgba(255, 255, 255, 0.4);
        border-radius: 52% 48% 45% 55% / 58% 42% 65% 35%;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        cursor: pointer;
        box-shadow: 
            0 12px 40px rgba(0, 0, 0, 0.15),
            0 4px 12px rgba(0, 0, 0, 0.1),
            inset 0 2px 4px rgba(255, 255, 255, 0.8),
            inset 0 -2px 4px rgba(0, 0, 0, 0.05);
        will-change: transform;
        backface-visibility: hidden;
    }

    .bubble span {
        font-size: 1rem;
        font-weight: 700;
        color: #1e293b;
        line-height: 1.3;
        padding: 1.2rem;
        text-shadow: 0 1px 3px rgba(255, 255, 255, 0.8);
        z-index: 2;
        position: relative;
        letter-spacing: 0.03em;
        text-align: center;
        display: block;
        max-width: 85%;
        word-wrap: break-word;
        hyphens: auto;
    }

    /* Dark mode styles */
    :global(.dark) .bubble {
        background: radial-gradient(ellipse at 32% 28%, 
            rgba(51, 65, 85, 0.95) 0%, 
            rgba(30, 41, 59, 0.9) 40%,
            rgba(15, 23, 42, 0.85) 100%);
        border: 2px solid rgba(148, 163, 184, 0.3);
        box-shadow: 
            0 12px 40px rgba(0, 0, 0, 0.4),
            0 4px 12px rgba(0, 0, 0, 0.3),
            inset 0 2px 4px rgba(148, 163, 184, 0.2),
            inset 0 -2px 4px rgba(0, 0, 0, 0.3);
    }

    :global(.dark) .bubble span {
        color: #f1f5f9;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .soft-skills-container {
            min-height: 500px;
        }

        .bubbles-container {
            padding: 1rem;
        }

        .bubble {
            min-width: 90px !important;
            min-height: 90px !important;
            max-width: 120px !important;
            max-height: 120px !important;
            margin: 0.3rem;
        }

        .bubble span {
            font-size: 0.75rem;
            padding: 0.6rem;
        }
    }

    @media (max-width: 480px) {
        .soft-skills-container {
            min-height: 400px;
        }

        .bubbles-container {
            gap: 0.8rem;
        }

        .bubble {
            min-width: 80px !important;
            min-height: 80px !important;
            max-width: 100px !important;
            max-height: 100px !important;
        }

        .bubble span {
            font-size: 0.65rem;
            padding: 0.4rem;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const bubbles = document.querySelectorAll('.bubble');
        
        // Function to calculate optimal bubble size based on text length
        function calculateBubbleSize(text, wordCount) {
            let baseSize = 150;
            let minSize = 140;
            let maxSize = 200;

            if (window.innerWidth <= 768) { // Adjust for smaller screens
                baseSize = 100;
                minSize = 90;
                maxSize = 120;
            }
            if (window.innerWidth <= 480) { // Adjust for even smaller screens
                baseSize = 90;
                minSize = 80;
                maxSize = 100;
            }
            
            if (wordCount === 2) {
                return { width: baseSize + 20, height: baseSize + 20 };
            }
            
            const textLength = text.length;
            const lengthFactor = Math.min(textLength / 12, 2.5);
            const wordFactor = Math.min(wordCount / 3, 1.5);
            
            let size = baseSize + (lengthFactor * 15) + (wordFactor * 10);
            size = Math.max(minSize, Math.min(maxSize, size));
            
            return { width: size, height: size };
        }
        
        // Apply dynamic sizing to bubbles
        bubbles.forEach((bubble, index) => {
            const skillText = bubble.dataset.skill.trim();
            const wordCount = skillText.split(/\s+/).length;
            const { width, height } = calculateBubbleSize(skillText, wordCount);

            bubble.style.width = `${width}px`;
            bubble.style.height = `${height}px`;

            // Ensure smooth animations
            bubble.style.willChange = 'transform';
            bubble.style.backfaceVisibility = 'hidden';
            bubble.style.transition = 'transform 0.3s ease-out';
        });

        // Clean Physics System - NO FLICKERING
        class BubblePhysics {
            constructor(bubble, container) {
                this.bubble = bubble;
                this.container = container;
                this.isActive = true;
                this.isHovered = false;

                // Physics properties
                this.x = 0;
                this.y = 0;
                this.z = 0;
                this.vx = (Math.random() - 0.5) * 2;
                this.vy = (Math.random() - 0.5) * 2;
                this.vz = (Math.random() - 0.5) * 2;
                this.damping = 0.9;
                this.maxSpeed = 1.5;

                this.updateDimensions();
                this.initializePosition();
                this.animate();
            }

            updateDimensions() {
                const bubbleRect = this.bubble.getBoundingClientRect();
                const containerRect = this.container.getBoundingClientRect();

                this.bubbleWidth = bubbleRect.width;
                this.bubbleHeight = bubbleRect.height;
                this.containerWidth = containerRect.width;
                this.containerHeight = containerRect.height;

                this.minX = -(this.containerWidth / 2) + (this.bubbleWidth / 2);
                this.maxX = (this.containerWidth / 2) - (this.bubbleWidth / 2);
                this.minY = -(this.containerHeight / 2) + (this.bubbleHeight / 2);
                this.maxY = (this.containerHeight / 2) - (this.bubbleHeight / 2);
                this.minZ = -200; // Arbitrary depth limit
                this.maxZ = 200; // Arbitrary depth limit
            }

            initializePosition() {
                this.x = this.minX + Math.random() * (this.maxX - this.minX);
                this.y = this.minY + Math.random() * (this.maxY - this.minY);
                this.z = this.minZ + Math.random() * (this.maxZ - this.minZ);

                // Assign consistent random initial velocities for all axes
                this.vx = (Math.random() - 0.5) * 4; // Random velocity for X
                this.vy = (Math.random() - 0.5) * 4; // Random velocity for Y
                this.vz = (Math.random() - 0.5) * 4; // Random velocity for Z

                // Ensure minimum speed to avoid static bubbles
                if (Math.abs(this.vx) < 1) this.vx = (this.vx >= 0 ? 1 : -1) * 1;
                if (Math.abs(this.vy) < 1) this.vy = (this.vy >= 0 ? 1 : -1) * 1;
                if (Math.abs(this.vz) < 1) this.vz = (this.vz >= 0 ? 1 : -1) * 1;
            }

            checkBoundaries() {
                if (this.x <= this.minX || this.x >= this.maxX) {
                    this.vx = -this.vx * this.damping;
                }
                if (this.y <= this.minY || this.y >= this.maxY) {
                    this.vy = -this.vy * this.damping;
                }
                if (this.z <= this.minZ || this.z >= this.maxZ) {
                    this.vz = -this.vz * this.damping;
                }
            }

            animate() {
                if (!this.isActive) return;

                if (!this.isHovered) {
                    this.x += this.vx;
                    this.y += this.vy;
                    this.z += this.vz;
                    this.checkBoundaries();

                    this.bubble.style.transform = `translate3d(${this.x}px, ${this.y}px, ${this.z}px)`;
                }

                requestAnimationFrame(() => this.animate());
            }

            pause() {
                this.isHovered = true;
            }

            resume() {
                this.isHovered = false;
            }
        }

        // Initialize physics system
        const bubbleContainer = document.querySelector('.bubbles-container');
        const physicsInstances = [];

        bubbles.forEach((bubble, index) => {
            const physics = new BubblePhysics(bubble, bubbleContainer);
            physicsInstances.push(physics);

            bubble.addEventListener('mouseenter', () => physics.pause());
            bubble.addEventListener('mouseleave', () => physics.resume());
        });

        // Handle window resize
        window.addEventListener('resize', () => {
            physicsInstances.forEach(physics => physics.updateDimensions());
        });
    });
</script>