---
// Simple Soft Skills Component with Working Animations
---

<div class="soft-skills-container">
    <div class="bubbles-container">
        <div class="bubble" data-skill="Effective Communication">
            <span>Effective<br>Communication</span>
        </div>
        <div class="bubble" data-skill="Teamwork">
            <span>Teamwork</span>
        </div>
        <div class="bubble" data-skill="Collaboration">
            <span>Collaboration</span>
        </div>
        <div class="bubble" data-skill="Problem-Solving">
            <span>Problem-Solving</span>
        </div>
        <div class="bubble" data-skill="Critical Thinking">
            <span>Critical<br>Thinking</span>
        </div>
        <div class="bubble" data-skill="Adaptability">
            <span>Adaptability</span>
        </div>
        <div class="bubble" data-skill="Continuous Learning">
            <span>Continuous<br>Learning</span>
        </div>
        <div class="bubble" data-skill="Time Management">
            <span>Time<br>Management</span>
        </div>
        <div class="bubble" data-skill="Attention to Detail">
            <span>Attention to Detail</span>
        </div>
        <div class="bubble" data-skill="Proactivity">
            <span>Proactivity</span>
        </div>
        <div class="bubble" data-skill="Resilience">
            <span>Resilience</span>
        </div>
    </div>
</div>

<style>
    .soft-skills-container {
        position: relative;
        min-height: 500px; /* Reduced from 700px */
        height: 500px; /* Reduced from 700px */
        display: flex;
        align-items: stretch; /* Changed from center to stretch */
        justify-content: center;
        overflow: hidden;
        /* Completely transparent background */
        background: transparent;
        border-radius: 0;
        backdrop-filter: none;
        border: none;
    }

    .bubbles-container {
        position: relative;
        width: 85%; /* Reduced from 100% to make it more compact */
        height: 90%; /* Reduced from 100% to add some margin */
        min-height: 400px; /* Reduced from 600px */
        display: block; /* Ensure it takes up space in the flex parent */
        /* The following properties are for when using grid on smaller screens */
        /* display: flex; */
        /* flex-wrap: wrap; */
        /* justify-content: center; */
        /* align-items: center; */
        padding: 1.5rem; /* Reduced from 2rem */
        perspective: 1000px;
        transform-style: preserve-3d;
        overflow: hidden; /* Contain the bubbles */
    }

    .bubble {
        position: absolute;
        background: radial-gradient(ellipse at 32% 28%, 
            rgba(36, 36, 56, 0.95) 0%, 
            rgba(26, 26, 35, 0.85) 40%,
            rgba(10, 10, 15, 0.75) 100%);
        backdrop-filter: blur(20px) saturate(1.2);
        border: 2px solid var(--border-medium);
        border-radius: 52% 48% 45% 55% / 58% 42% 65% 35%;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        cursor: pointer;
        transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1), 
                    border-radius 0.5s ease-in-out,
                    box-shadow 0.4s cubic-bezier(0.4, 0, 0.2, 1),
                    background 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 
            0 12px 40px var(--shadow-medium),
            0 4px 12px var(--shadow-subtle),
            inset 0 2px 4px rgba(226, 232, 240, 0.1),
            inset 0 -2px 4px var(--shadow-subtle);
        /* CSS animations are removed to be replaced by JS */
        transform-style: preserve-3d;
        will-change: transform, border-radius;
        /* Auto-sizing properties */
        min-width: 140px;
        min-height: 140px;
        max-width: 220px;
        max-height: 220px;
        width: auto;
        height: auto;
        padding: 1.5rem;
    }

    /* Content-based sizing for specific bubbles */
    .bubble[data-skill="Teamwork"],
    .bubble[data-skill="Collaboration"],
    .bubble[data-skill="Adaptability"],
    .bubble[data-skill="Proactivity"],
    .bubble[data-skill="Resilience"] {
        min-width: 150px;
        min-height: 150px;
        padding: 1.2rem;
    }

    .bubble[data-skill="Problem-Solving"],
    .bubble[data-skill="Time Management"] {
        min-width: 170px;
        min-height: 170px;
        padding: 1.3rem;
    }

    .bubble[data-skill="Effective Communication"],
    .bubble[data-skill="Critical Thinking"],
    .bubble[data-skill="Continuous Learning"],
    .bubble[data-skill="Attention to Detail"] {
        min-width: 190px;
        min-height: 190px;
        padding: 1.4rem;
    }

    .bubble span {
        font-size: 0.95rem;
        font-weight: 700;
        color: var(--text-primary);
        line-height: 1.2;
        text-shadow: 0 1px 3px var(--shadow-subtle);
        z-index: 2;
        position: relative;
        letter-spacing: 0.02em;
        text-align: center;
        display: block;
        word-wrap: break-word;
        hyphens: auto;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        white-space: nowrap;
        overflow: visible;
    }

    /* Adjust font size for longer content */
    .bubble[data-skill="Effective Communication"] span,
    .bubble[data-skill="Critical Thinking"] span,
    .bubble[data-skill="Continuous Learning"] span,
    .bubble[data-skill="Attention to Detail"] span {
        font-size: 0.85rem;
        white-space: normal;
        line-height: 1.1;
    }

    /* Dark mode styles */
    :global(.dark) .bubble {
        background: radial-gradient(ellipse at 32% 28%, 
            rgba(51, 65, 85, 0.95) 0%, 
            rgba(30, 41, 59, 0.9) 40%,
            rgba(15, 23, 42, 0.85) 100%);
        border: 2px solid rgba(148, 163, 184, 0.3);
        box-shadow: 
            0 12px 40px rgba(0, 0, 0, 0.4),
            0 4px 12px rgba(0, 0, 0, 0.3),
            inset 0 2px 4px rgba(148, 163, 184, 0.2),
            inset 0 -2px 4px rgba(0, 0, 0, 0.3);
    }

    :global(.dark) .bubble span {
        color: #f1f5f9;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
    }

    /* Hover effects are now handled by JS */
    .bubble.is-hovered {
        border-radius: 48% 52% 55% 45% / 42% 58% 35% 65%;
        box-shadow: 
            0 25px 60px rgba(0, 0, 0, 0.25),
            0 12px 25px rgba(0, 0, 0, 0.2),
            inset 0 3px 8px rgba(255, 255, 255, 0.95),
            inset 0 -3px 8px rgba(0, 0, 0, 0.15),
            0 0 0 3px rgba(16, 185, 129, 0.3),
            0 0 20px rgba(16, 185, 129, 0.4);
        background: radial-gradient(ellipse at 35% 25%, 
            rgba(16, 185, 129, 0.3) 0%, 
            rgba(34, 197, 94, 0.25) 40%,
            rgba(255, 255, 255, 0.9) 100%);
        z-index: 10;
    }

    .bubble.is-exploding {
        transform: scale(1.5);
        opacity: 0;
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    }

    /* Animations are now handled by JS */
    @keyframes bubbleDeform {
        0%, 100% {
            border-radius: 52% 48% 45% 55% / 58% 42% 65% 35%;
        }
        50% {
            border-radius: 48% 52% 55% 45% / 42% 58% 35% 65%;
        }
    }

    /* Individual bubble positioning is now handled by JS */

    /* Responsive design */
    @media (max-width: 768px) {
        .soft-skills-container {
            min-height: 450px; /* Adjusted for smaller container */
            height: 450px;
        }

        .bubbles-container {
            width: 95%; /* Slightly larger on mobile for better use of space */
            padding: 1rem;
            position: relative;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 1.5rem;
            align-items: center;
            justify-items: center;
        }

        .bubble {
            position: relative !important;
            min-width: 120px !important;
            min-height: 120px !important;
            max-width: 160px !important;
            max-height: 160px !important;
            width: auto !important;
            height: auto !important;
            top: auto !important;
            left: auto !important;
            margin: 0.5rem;
            padding: 0.8rem !important;
        }

        .bubble span {
            font-size: 0.8rem;
        }

        .bubble[data-skill="Effective Communication"] span,
        .bubble[data-skill="Critical Thinking"] span,
        .bubble[data-skill="Continuous Learning"] span,
        .bubble[data-skill="Attention to Detail"] span {
            font-size: 0.75rem;
        }
    }

    @media (max-width: 480px) {
        .bubbles-container {
            grid-template-columns: repeat(2, 1fr);
            gap: 1rem;
        }

        .bubble {
            min-width: 100px !important;
            min-height: 100px !important;
            max-width: 140px !important;
            max-height: 140px !important;
            padding: 0.6rem !important;
        }

        .bubble span {
            font-size: 0.7rem;
        }

        .bubble[data-skill="Effective Communication"] span,
        .bubble[data-skill="Critical Thinking"] span,
        .bubble[data-skill="Continuous Learning"] span,
        .bubble[data-skill="Attention to Detail"] span {
            font-size: 0.65rem;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const container = document.querySelector('.bubbles-container') as HTMLElement;
        const bubbles = document.querySelectorAll('.bubble') as NodeListOf<HTMLElement>;
        let animationFrameId: number;

        if (!container) {
            console.error('Bubbles container not found!');
            return;
        }

        // --- Physics and Animation Core ---

        class BubblePhysics {
            element: HTMLElement;
            x!: number;
            y!: number;
            vx!: number;
            vy!: number;
            width!: number;
            height!: number;
            isPaused: boolean = false;
            isExploding: boolean = false;
            randomForceInterval: number;

            constructor(element: HTMLElement, containerRect: DOMRect) {
                this.element = element;
                this.updateDimensions();
                this.initPosition(containerRect);
                this.initVelocity();

                // Apply a small random force periodically for more natural movement
                this.randomForceInterval = window.setInterval(() => this.addRandomForce(), Math.random() * 5000 + 2000);
            }

            updateDimensions() {
                const rect = this.element.getBoundingClientRect();
                this.width = rect.width;
                this.height = rect.height;
            }

            initPosition(containerRect: DOMRect) {
                // Account for padding (1.5rem = 24px on each side)
                const padding = 24;
                const availableWidth = containerRect.width - (padding * 2) - this.width;
                const availableHeight = containerRect.height - (padding * 2) - this.height;
                
                this.x = padding + Math.random() * Math.max(0, availableWidth);
                this.y = padding + Math.random() * Math.max(0, availableHeight);
            }

            initVelocity() {
                const speed = 0.5;
                const angle = Math.random() * 2 * Math.PI;
                this.vx = Math.cos(angle) * speed;
                this.vy = Math.sin(angle) * speed;
            }

            addRandomForce() {
                if (this.isPaused || this.isExploding) return;
                const forceStrength = 0.2;
                this.vx += (Math.random() - 0.5) * forceStrength;
                this.vy += (Math.random() - 0.5) * forceStrength;

                // Clamp velocity to a max speed
                const maxSpeed = 0.8;
                const speed = Math.sqrt(this.vx * this.vx + this.vy * this.vy);
                if (speed > maxSpeed) {
                    this.vx = (this.vx / speed) * maxSpeed;
                    this.vy = (this.vy / speed) * maxSpeed;
                }
            }

            updatePosition(containerRect: DOMRect) {
                if (this.isPaused || this.isExploding) return;

                this.x += this.vx;
                this.y += this.vy;

                // Account for padding (1.5rem = 24px)
                const padding = 24;
                const minX = padding;
                const maxX = containerRect.width - padding - this.width;
                const minY = padding;
                const maxY = containerRect.height - padding - this.height;

                // Collision detection with container walls (considering padding)
                if (this.x <= minX || this.x >= maxX) {
                    this.vx *= -1; // Reverse horizontal velocity
                    this.x = Math.max(minX, Math.min(this.x, maxX)); // Clamp position
                }
                if (this.y <= minY || this.y >= maxY) {
                    this.vy *= -1; // Reverse vertical velocity
                    this.y = Math.max(minY, Math.min(this.y, maxY)); // Clamp position
                }
            }

            draw() {
                this.element.style.transform = `translate(${this.x}px, ${this.y}px)`;
            }

            pause() {
                this.isPaused = true;
                this.element.classList.add('is-hovered');
            }

            resume() {
                this.isPaused = false;
                this.element.classList.remove('is-hovered');
            }

            explode() {
                if (this.isExploding) return;
                this.isExploding = true;
                this.element.classList.add('is-exploding');

                setTimeout(() => {
                    this.element.classList.remove('is-exploding');
                    const containerRect = container.getBoundingClientRect();
                    this.initPosition(containerRect);
                    this.initVelocity();
                    this.isExploding = false;
                }, 500); // Matches CSS transition time
            }
        }

        const bubbleInstances: BubblePhysics[] = [];

        function setup() {
            const containerRect = container.getBoundingClientRect();
            bubbles.forEach(bubble => {
                const instance = new BubblePhysics(bubble, containerRect);
                bubbleInstances.push(instance);

                // Add event listeners for interaction
                bubble.addEventListener('mouseenter', () => instance.pause());
                bubble.addEventListener('mouseleave', () => instance.resume());
                bubble.addEventListener('click', () => instance.explode());
            });
        }

        function animate() {
            const containerRect = container.getBoundingClientRect();
            bubbleInstances.forEach(instance => {
                instance.updatePosition(containerRect);
                instance.draw();
            });
            animationFrameId = requestAnimationFrame(animate);
        }

        // --- Initialization and Resize Handling ---

        function init() {
            // Clear previous instances and listeners if any
            bubbleInstances.length = 0;
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
            }
            
            // Check if we are on a mobile view where grid is used
            const isMobileView = getComputedStyle(container).display === 'grid';
            if (isMobileView) {
                // On mobile, we don't run the physics simulation.
                // The grid layout handles positioning.
                return;
            }

            // Add a small delay to ensure the container has proper dimensions
            setTimeout(() => {
                setup();
                animate();
            }, 100);
        }

        // Re-initialize on window resize to adapt to new container dimensions
        let resizeTimeout: number;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = window.setTimeout(init, 250);
        });

        // Initial start with delay to ensure DOM is fully rendered
        setTimeout(init, 200);
    });
</script>
