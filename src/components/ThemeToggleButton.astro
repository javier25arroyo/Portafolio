---
/**
 * ThemeToggleButton.astro
 * 
 * Componente de alternancia de tema (claro/oscuro) con experiencia de usuario premium
 * 
 * Caracter√≠sticas:
 * - Animaciones fluidas en la transici√≥n entre temas
 * - Efecto ripple en la interacci√≥n
 * - Feedback h√°ptico (vibraci√≥n) en dispositivos que lo soportan
 * - Compatibilidad con teclado y navegaci√≥n por teclado
 * - Soporte para lectores de pantalla con notificaciones de cambio de tema
 * - Optimizado para preferencias de reducci√≥n de movimiento
 * - Dise√±o adaptable y est√©tico
 */
---
<!-- Componente ThemeToggleButton - Versi√≥n simplificada para depuraci√≥n -->
<div class="theme-toggle-container">
  <style>
    .theme-toggle-btn {
      background-color: #f1f5f9;
      border-radius: 9999px;
      cursor: pointer;
      display: flex;
      height: 2.5rem;
      overflow: hidden;
      position: relative;
      transition: all 0.3s ease;
      width: 5rem;
    }
    
    .dark .theme-toggle-btn {
      background-color: #1e293b;
    }
    
    .toggle-slider {
      background-color: white;
      border-radius: 50%;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
      height: 2rem;
      left: 0.25rem;
      position: absolute;
      top: 0.25rem;
      transition: transform 0.3s ease;
      width: 2rem;
    }
    
    .dark .toggle-slider {
      background-color: #334155;
      transform: translateX(2.5rem);
    }
    
    .toggle-icon {
      align-items: center;
      color: #334155;
      display: flex;
      font-size: 1.25rem;
      height: 100%;
      justify-content: center;
      position: absolute;
      top: 0;
      transition: opacity 0.3s ease;
      width: 2rem;
    }
    
    .toggle-icon.sun {
      opacity: 1;
      right: 0.25rem;
    }
    
    .toggle-icon.moon {
      left: 0.25rem;
      opacity: 0;
    }
    
    .dark .toggle-icon.sun {
      opacity: 0;
    }
    
    .dark .toggle-icon.moon {
      color: #e2e8f0;
      opacity: 1;
    }
    
    /* Para accesibilidad */
    .theme-toggle-input {
      height: 1px;
      left: -9999px;
      position: absolute;
      width: 1px;
    }
    
    .theme-toggle-input:focus + .theme-toggle-btn {
      outline: 2px solid #3b82f6;
    }
    
    .sr-only {
      border: 0;
      clip: rect(0, 0, 0, 0);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      white-space: nowrap;
      width: 1px;
    }
  </style>

  <div class="theme-toggle-wrapper">
    <input 
      type="checkbox" 
      id="theme-toggle" 
      class="theme-toggle-input" 
      aria-label="Cambiar tema" 
    />
    <label for="theme-toggle" class="theme-toggle-btn">
      <div class="toggle-slider"></div>
      <div class="toggle-icon moon">üåô</div>
      <div class="toggle-icon sun">‚òÄÔ∏è</div>
    </label>
    <div id="theme-status" class="sr-only" role="status" aria-live="polite"></div>
  </div>
</div>

<script>
  // Definici√≥n global para TypeScript
  declare global {
    interface Window {
      toggleThemeWithAnimation?: () => void;
    }
  }

  // Funci√≥n simplificada para inicializar el bot√≥n de tema
  function setupThemeToggle() {
    try {
      console.log("Inicializando bot√≥n de tema...");
      const toggleInput = document.getElementById('theme-toggle') as HTMLInputElement;
      const themeStatus = document.getElementById('theme-status');
      
      if (!toggleInput) {
        console.error("No se encontr√≥ el input del toggle de tema");
        return;
      }
      
      // Configurar estado inicial seg√∫n el tema actual
      const isDarkMode = document.documentElement.classList.contains('dark');
      toggleInput.checked = isDarkMode;
      
      if (themeStatus) {
        themeStatus.textContent = isDarkMode 
          ? "Tema oscuro activado" 
          : "Tema claro activado";
      }
      
      // Evento de cambio en el toggle
      toggleInput.addEventListener('change', () => {
        try {
          // Intentar usar la funci√≥n global de animaci√≥n si est√° disponible
          if (typeof window.toggleThemeWithAnimation === 'function') {
            console.log("Usando funci√≥n global de animaci√≥n de tema");
            window.toggleThemeWithAnimation();
          } else {
            // Fallback b√°sico para cambiar tema
            console.log("Usando fallback para cambiar tema");
            const html = document.documentElement;
            const newIsDark = !html.classList.contains('dark');
            
            if (newIsDark) {
              html.classList.add('dark');
              localStorage.setItem('theme', 'dark');
            } else {
              html.classList.remove('dark');
              localStorage.setItem('theme', 'light');
            }
            
            // Actualizar estado para accesibilidad
            if (themeStatus) {
              themeStatus.textContent = newIsDark 
                ? "Tema oscuro activado" 
                : "Tema claro activado";
            }
          }
        } catch (error) {
          console.error("Error al cambiar el tema:", error);
        }
      });
      
      // Soporte de accesibilidad para teclado
      toggleInput.addEventListener('keydown', (e) => {
        if (e.key === ' ' || e.key === 'Enter') {
          e.preventDefault();
          toggleInput.click();
        }
      });
      
      // Observar cambios en el tema para actualizar el toggle
      const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.attributeName === 'class') {
            const isDark = document.documentElement.classList.contains('dark');
            toggleInput.checked = isDark;
            
            if (themeStatus) {
              themeStatus.textContent = isDark 
                ? "Tema oscuro activado" 
                : "Tema claro activado";
            }
          }
        }
      });
      
      observer.observe(document.documentElement, { 
        attributes: true, 
        attributeFilter: ['class'] 
      });
      
      console.log("Bot√≥n de tema inicializado correctamente");
    } catch (error) {
      console.error("Error al configurar el bot√≥n de tema:", error);
    }
  }

  // Inicializar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupThemeToggle);
  } else {
    // Si ya est√° cargado, intentar inicializar
    window.setTimeout(setupThemeToggle, 100);
  }
</script>

<!--
  SOLUCI√ìN DE PROBLEMAS Y DEPURACI√ìN:
  
  Si tienes problemas con la visualizaci√≥n del bot√≥n de tema:
  
  1. Verifica la consola del navegador para mensajes de error.
  
  2. Aseg√∫rate de que el componente Layout.astro importa correctamente este componente:
     import ThemeToggleButton from '../components/ThemeToggleButton.astro';
  
  3. Si tienes problemas con el cambio de tema, verifica que la funci√≥n toggleThemeWithAnimation
     est√° correctamente definida y expuesta en Layout.astro:
     window.toggleThemeWithAnimation = toggleThemeWithAnimation;
     
  4. Esta es una versi√≥n simplificada para debugging. Una vez que funcione, puedes volver
     a implementar caracter√≠sticas avanzadas de UX/UI como los efectos ripple.
  
  5. El bot√≥n usa CSS puro en lugar de Tailwind para facilitar la depuraci√≥n.
-->