---
// src/components/Them        slider.style.transform = 'translateX(32px)';ToggleButton.astro
---
<label class="relative inline-block w-16 h-8 group cursor-pointer">
  <input type="checkbox" id="theme-toggle" class="opacity-0 w-0 h-0" aria-label="Toggle theme" />
  <span class="absolute cursor-pointer top-0 left-0 right-0 bottom-0 bg-slate-200 dark:bg-slate-700 transition duration-300 rounded-full shadow-inner group-hover:bg-slate-300 dark:group-hover:bg-slate-600"></span>
  <span class="slider absolute h-7 w-7 left-0.5 bottom-0.5 bg-white dark:bg-slate-800 transition-all duration-300 rounded-full flex items-center justify-center shadow-md border border-slate-200 dark:border-slate-600">
    <img src="/src/assets/icons/light_mode.svg" alt="Modo claro" class="icon-light w-5 h-5 transition-all duration-300" />
    <img src="/src/assets/icons/dark_mode.svg" alt="Modo oscuro" class="icon-dark w-5 h-5 hidden transition-all duration-300" />
  </span>
</label>

<script>
  function updateToggleButton() {
    const themeToggle = document.getElementById('theme-toggle') as HTMLInputElement;
    const lightIcon = document.querySelector('.icon-light') as HTMLElement;
    const darkIcon = document.querySelector('.icon-dark') as HTMLElement;
    const slider = document.querySelector('.slider') as HTMLElement;
    const isDark = document.documentElement.classList.contains('dark');
    
    if (!themeToggle || !lightIcon || !darkIcon || !slider) return;
    
    if (isDark) {
      themeToggle.checked = true;
      lightIcon.classList.add('hidden');
      darkIcon.classList.remove('hidden');
      slider.style.transform = 'translateX(32px)';
      darkIcon.style.transform = 'rotate(360deg)';
      lightIcon.style.transform = 'rotate(0deg)';
    } else {
      themeToggle.checked = false;
      lightIcon.classList.remove('hidden');
      darkIcon.classList.add('hidden');
      slider.style.transform = 'translateX(0px)';
      lightIcon.style.transform = 'rotate(360deg)';
      darkIcon.style.transform = 'rotate(0deg)';
    }
  }

  function initializeToggle() {
    const themeToggle = document.getElementById('theme-toggle') as HTMLInputElement;
    
    if (themeToggle) {
      // Actualizar el estado inicial del toggle
      updateToggleButton();
      
      // Agregar event listener para cambios
      themeToggle.addEventListener('change', () => {
        // Usar la función global de animación
        if ((window as any).toggleThemeWithAnimation) {
          (window as any).toggleThemeWithAnimation();
        }
        // Actualizar el toggle después de un delay para sincronizar con la animación
        setTimeout(updateToggleButton, 350);
      });
      
      // Observar cambios en el tema para actualizar el toggle
      const observer = new MutationObserver(updateToggleButton);
      observer.observe(document.documentElement, { 
        attributes: true, 
        attributeFilter: ['class'] 
      });
    }
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeToggle);
  } else {
    initializeToggle();
  }
</script>