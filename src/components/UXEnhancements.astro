---
---

<!-- Scroll Progress Indicator -->
<div id="scroll-progress" class="fixed top-0 left-0 w-full h-1 bg-slate-700 z-50">
  <div id="scroll-progress-bar" class="h-full bg-gradient-to-r from-emerald-500 to-emerald-600 transition-all duration-300 ease-out" style="width: 0%"></div>
</div>

<!-- Back to Top Button -->
<button 
  id="back-to-top" 
  class="fixed bottom-8 right-8 w-12 h-12 bg-emerald-600 hover:bg-emerald-700 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 opacity-0 pointer-events-none z-40"
  aria-label="Back to top"
>
  <svg class="w-6 h-6 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"/>
  </svg>
</button>

<style>
  /* Smooth reveal animations */
  .reveal {
    opacity: 0;
    transform: translateY(30px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .reveal.active {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Stagger animation delays */
  .reveal:nth-child(1) { transition-delay: 0.1s; }
  .reveal:nth-child(2) { transition-delay: 0.2s; }
  .reveal:nth-child(3) { transition-delay: 0.3s; }
  .reveal:nth-child(4) { transition-delay: 0.4s; }
  .reveal:nth-child(5) { transition-delay: 0.5s; }
</style>

<script>
  // Scroll Progress
  function updateScrollProgress() {
    const scrollProgress = document.getElementById('scroll-progress-bar');
    const scrollTop = window.pageYOffset;
    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
    const scrollPercent = (scrollTop / docHeight) * 100;
    
    if (scrollProgress) {
      scrollProgress.style.width = scrollPercent + '%';
    }
  }

  // Back to Top Button
  function updateBackToTop() {
    const backToTop = document.getElementById('back-to-top');
    if (window.pageYOffset > 300) {
      backToTop?.classList.remove('opacity-0', 'pointer-events-none');
      backToTop?.classList.add('opacity-100');
    } else {
      backToTop?.classList.add('opacity-0', 'pointer-events-none');
      backToTop?.classList.remove('opacity-100');
    }
  }

  // Reveal animations on scroll
  function revealOnScroll() {
    const reveals = document.querySelectorAll('.reveal');
    reveals.forEach(reveal => {
      const windowHeight = window.innerHeight;
      const elementTop = reveal.getBoundingClientRect().top;
      const elementVisible = 150;
      
      if (elementTop < windowHeight - elementVisible) {
        reveal.classList.add('active');
      }
    });
  }

  // Event listeners
  window.addEventListener('scroll', () => {
    updateScrollProgress();
    updateBackToTop();
    revealOnScroll();
  });

  // Back to top click handler
  document.getElementById('back-to-top')?.addEventListener('click', () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });

  // Initial calls
  updateScrollProgress();
  updateBackToTop();
  revealOnScroll();
</script>
