---
/**
 * Componente que muestra el icono de tema adecuado según el tema actual (light/dark).
 * Usa los SVG en src/assets/icons/light_mode.svg y dark_mode.svg
 */
const lightIcon = '/src/assets/icons/light_mode.svg';
const darkIcon = '/src/assets/icons/dark_mode.svg';
---

<img 
  id="theme-icon" 
  src={lightIcon} 
  alt="Theme icon" 
  class="h-6 w-6 transition-opacity duration-200" 
/>

<script>
  // Función para actualizar el icono según el tema
  function updateThemeIcon() {
    const themeIcon = document.getElementById('theme-icon') as HTMLImageElement;
    const isDark = document.documentElement.classList.contains('dark');
    
    if (themeIcon) {
      themeIcon.src = isDark ? '/src/assets/icons/dark_mode.svg' : '/src/assets/icons/light_mode.svg';
      themeIcon.alt = isDark ? 'Dark mode icon' : 'Light mode icon';
    }
  }

  // Detecta el tema inicial
  function initializeTheme() {
    const savedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    
    updateThemeIcon();
  }

  // Observa cambios en el tema
  const observer = new MutationObserver(updateThemeIcon);
  observer.observe(document.documentElement, { 
    attributes: true, 
    attributeFilter: ['class'] 
  });

  // Inicializa cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTheme);
  } else {
    initializeTheme();
  }
</script>
